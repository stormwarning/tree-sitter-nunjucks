================
Basic expressions
================

{{ }}
{{ foo }}
{{ foo[42].bar }}
<span>{{ foo }}</span>

--------

(template
	(content)
	(expression_tag)
	(content)
	(expression_tag
		(expression
			(unary_expression
				(primary_expression
					(identifier)))))
	(content)
	(expression_tag
		(expression
			(expression
				(expression
					(unary_expression
						(primary_expression
							(identifier))))
				(expression
					(unary_expression
						(primary_expression
							(literal
								(number_literal
									(dec_literal)))))))
			(expression
				(unary_expression
					(primary_expression
						(identifier))))))
	(content)
	(expression_tag
		(expression
			(unary_expression
				(primary_expression
					(identifier)))))
	(content))

================
Maths
================

{{ 4 + 8 }}
{{ foo*2 }}

--------

(template
	(content)
	(expression_tag
		(expression
			(expression
				(unary_expression
					(primary_expression
						(literal
							(number_literal
								(dec_literal))))))
			(binary_operator)
			(unary_expression
				(primary_expression
					(literal
						(number_literal
							(dec_literal)))))))
	(content)
	(expression_tag
		(expression
			(expression
				(unary_expression
					(primary_expression
						(identifier))))
			(binary_operator)
			(unary_expression
				(primary_expression
					(literal
						(number_literal
							(dec_literal)))))))
	(content))

================
Comparisons
================

{{ numUsers > 5 }}
{{ i === 0 }}

--------

(template
	(content)
	(expression_tag
		(expression
			(expression
				(unary_expression
					(primary_expression
						(identifier))))
			(binary_operator)
			(unary_expression
				(primary_expression
					(literal
						(number_literal
							(dec_literal)))))))
	(content)
	(expression_tag
		(expression
			(expression
				(unary_expression
					(primary_expression
						(identifier))))
			(binary_operator)
			(unary_expression
				(primary_expression
					(literal
						(number_literal
							(dec_literal)))))))
	(content))

================
Logic
================

{{ users and showUsers }}
{{ i === 0 and not hideFirst }}
{{ (x < 5 or y < 5) and foo }}

--------

(template
	(content)
	(expression_tag
		(expression
			(expression
				(unary_expression
					(primary_expression
						(identifier))))
			(binary_operator)
			(unary_expression
				(primary_expression
					(identifier)))))
	(content)
	(expression_tag
		(expression
			(expression
				(expression
					(unary_expression
						(primary_expression
							(identifier))))
				(binary_operator)
				(unary_expression
					(primary_expression
						(literal
							(number_literal
								(dec_literal))))))
			(binary_operator)
			(unary_expression
				(unary_operator)
				(unary_expression
					(primary_expression
						(identifier))))))
	(content)
	(expression_tag
		(expression
			(expression
				(unary_expression
					(primary_expression
						(expression
							(expression
								(expression
									(expression
										(unary_expression
											(primary_expression
												(identifier))))
									(binary_operator)
									(unary_expression
										(primary_expression
											(literal
												(number_literal
													(dec_literal))))))
								(binary_operator)
								(unary_expression
									(primary_expression
										(identifier))))
							(binary_operator)
							(unary_expression
								(primary_expression
									(literal
										(number_literal
											(dec_literal)))))))))
			(binary_operator)
			(unary_expression
				(primary_expression
					(identifier)))))
	(content))

================
If expression
================

{{ foo if foo else "false" }}
{{ baz(foo if foo else "default") }}
{{ "true" if foo }}

--------

(template
	(content)
	(expression_tag
		(expression
			(unary_expression
				(primary_expression
					(identifier))))
		(ternary_expression
			(expression
				(unary_expression
					(primary_expression
						(identifier))))
			(expression
				(unary_expression
					(primary_expression
						(literal
							(string_literal)))))))
	(content)
	(expression_tag
		(expression
			(unary_expression
				(primary_expression
					(function_call
						(identifier)
						(expression
							(unary_expression
								(primary_expression
									(identifier))))
						(ternary_expression
							(expression
								(unary_expression
									(primary_expression
										(identifier))))
							(expression
								(unary_expression
									(primary_expression
										(literal
											(string_literal)))))))))))
	(content)
	(expression_tag
		(expression
			(unary_expression
				(primary_expression
					(literal
						(string_literal)))))
		(ternary_expression
			(expression
				(unary_expression
					(primary_expression
						(identifier))))))
	(content))

================
Function calls
================

{{ foo(1, 2, 3) }}
{{ foo(1, 2, bar=3, baz=4) }}

--------

(template
	(content)
	(expression_tag
		(expression
			(unary_expression
				(primary_expression
					(function_call
						(identifier)
						(expression
							(unary_expression
								(primary_expression
									(literal
										(number_literal
										    (dec_literal))))))
						(expression
							(unary_expression
								(primary_expression
									(literal
										(number_literal
											(dec_literal))))))
						(expression
							(unary_expression
								(primary_expression
									(literal
										(number_literal
											(dec_literal)))))))))))
	(content)
		(expression_tag
			(expression
				(unary_expression
					(primary_expression
						(function_call
							(identifier)
							(expression
								(unary_expression
									(primary_expression
										(literal
											(number_literal
												(dec_literal))))))
							(expression
								(unary_expression
									(primary_expression
										(literal
											(number_literal
												(dec_literal))))))
							(identifier)
							(binary_operator)
							(expression
								(unary_expression
									(primary_expression
										(literal
											(number_literal
												(dec_literal))))))
							(identifier)
							(binary_operator)
							(expression
								(unary_expression
									(primary_expression
										(literal
											(number_literal
												(dec_literal)))))))))))
	(content))
