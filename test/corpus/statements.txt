================
Basic statements
================

<div>
{% %}
</div>

--------

(template
  (content)
  (statement_tag)
  (content))

================
If statement
================

{% if hungry %}
{% elif tired %}
{% else %}
{% endif %}

--------

(template
  (content)
  (statement_tag
    (if_statement
      (expression
        (unary_expression
          (primary_expression
            (identifier))))))
  (content)
  (statement_tag
    (if_statement
      (expression
        (unary_expression
          (primary_expression
            (identifier))))))
  (content)
  (statement_tag
    (else_statement))
  (content)
  (statement_tag
    (end_statement))
  (content))

================
For statement
================

{% for item in object.items %}
{% for ingredient, amount in food %}
{% endfor %}

--------

(template
  (content)
  (statement_tag
    (for_statement
      (identifier)
      (expression
        (expression
          (unary_expression
            (primary_expression
              (identifier))))
        (expression
          (unary_expression
            (primary_expression
              (identifier)))))))
  (content)
  (statement_tag
    (for_statement
      (identifier)
      (identifier)
      (expression
        (unary_expression
          (primary_expression
            (identifier))))))
  (content)
  (statement_tag
    (end_statement))
  (content))

================
Async loop statements
================

{% asyncEach item in items %}
{% endeach %}
{% asyncAll item in items %}
{% endall %}

--------

(template
  (content)
  (statement_tag
    (async_each_statement
      (identifier)
      (expression
        (unary_expression
          (primary_expression
            (identifier))))))
  (content)
  (statement_tag
    (end_statement))
  (content)
  (statement_tag
    (async_all_statement
      (identifier)
      (expression
        (unary_expression
          (primary_expression
            (identifier))))))
  (content)
  (statement_tag
    (end_statement))
  (content))

================
Macro statements
================

{% macro field(name, value='', type='text') %}
{% endmacro %}

--------

(template
  (content)
  (statement_tag
    (macro_statement
      (function_call
        (identifier)
        (expression
          (unary_expression
            (primary_expression
              (identifier))))
        (identifier)
        (binary_operator)
        (expression
          (unary_expression
            (primary_expression
              (string_literal))))
        (identifier)
        (binary_operator)
        (expression
          (unary_expression
            (primary_expression
              (string_literal)))))))
  (content)
  (statement_tag
    (end_statement))
  (content))

================
Set statements
================

{% set username = "joe" %}
{% set x, y, z = 5 %}
{% set standardModal %}
  {% include 'standardModalData.html' %}
{% endset %}

--------

(template
  (content)
  (statement_tag
    (set_statement
      (expression
        (unary_expression
          (primary_expression
            (identifier))))
      (binary_operator)
      (expression
        (unary_expression
          (primary_expression
            (string_literal))))))
  (content)
  (statement_tag
    (set_statement
      (expression
        (unary_expression
          (primary_expression
            (identifier))))
      (expression
        (unary_expression
          (primary_expression
            (identifier))))
      (expression
        (unary_expression
          (primary_expression
            (identifier))))
      (binary_operator)
      (expression
        (unary_expression
          (primary_expression
            (number_literal
              (dec_literal)))))))
  (content)
  (statement_tag
    (set_statement
      (expression
        (unary_expression
          (primary_expression
            (identifier))))))
  (content)
  (statement_tag
    (include_statement
      (string_literal)))
  (content)
  (statement_tag
    (end_statement))
  (content))

================
Extends statements
================

{% extends "base.html" %}
{% extends parentTemplate %}
{% extends name + ".html" %}

--------

(template
  (content)
  (statement_tag
    (extends_statement
      (string_literal)))
  (content)
  (statement_tag
    (extends_statement
      (identifier)))
  (content)
  (statement_tag
    (extends_statement
      (identifier)
      (binary_operator)
      (string_literal)))
  (content))

================
Block statements
================

{% block css %}
{% endblock %}

--------

(template
  (content)
  (statement_tag
    (block_statement
      (identifier)))
  (content)
  (statement_tag
    (end_statement))
  (content))

================
Include statements
================

{% include "item.html" %}
{% include name + ".html" %}
{% include "missing.html" ignore missing %}

--------

(template
  (content)
  (statement_tag
    (include_statement
      (string_literal)))
  (content)
  (statement_tag
    (include_statement
      (identifier)
      (binary_operator)
      (string_literal)))
  (content)
  (statement_tag
    (include_statement
      (string_literal)
      (include_attribute
        (attribute_ignore))))
  (content))

================
Import statements
================

{% import "forms.html" as forms %}
{% from "forms.html" import field, label as description %}
{% from "forms.html" import field with context %}
{% import name + ".html" as obj %}

--------

(template
  (content)
  (statement_tag
    (import_statement
      (string_literal)
      (import_as
        (identifier))))
  (content)
  (statement_tag
    (import_statement
      (import_from
        (string_literal))
      (identifier)
      (identifier)
      (import_as
        (identifier))))
  (content)
  (statement_tag
    (import_statement
      (import_from
        (string_literal))
      (identifier)
      (attribute_context)))
  (content)
  (statement_tag
    (import_statement
      (identifier)
      (binary_operator)
      (string_literal)
      (import_as
        (identifier))))
  (content))

================
Raw statements
:skip
================

{% raw %}
{{ foo }}
{% endraw %}
{% verbatim %}
{% endverbatim %}

--------

(template
  (content)
  (statement_tag
    (import_statement
      (string_literal)
      (import_as
        (identifier))))
  (content)
  (statement_tag
    (import_statement
      (import_from
        (string_literal))
      (identifier)
      (identifier)
      (import_as
        (identifier))))
  (content)
  (statement_tag
    (import_statement
      (import_from
        (string_literal))
      (identifier)
      (attribute_context)))
  (content)
  (statement_tag
    (import_statement
      (identifier)
      (binary_operator)
      (string_literal)
      (import_as
        (identifier))))
  (content))
